import requests
from playwright.sync_api import sync_playwright
import telebot
from telebot import types
import datetime
import time
from googletrans import Translator

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞
bot = telebot.TeleBot('7577436888:AAFYEN9ou0zQPyXZ6B2HfIm4VPKA-CbOT0g')

# API –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∫—É—Ä—Å–∞ –≤–∞–ª—é—Ç
EXCHANGE_RATES_API = 'https://api.exchangerate-api.com/v4/latest/KRW'


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∞–∫—Ç—É–∞–ª—å–Ω–æ–≥–æ –∫—É—Ä—Å–∞ –≤–∞–ª—é—Ç
def get_exchange_rates():
    try:
        response = requests.get(EXCHANGE_RATES_API)
        response.raise_for_status()  # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –æ—à–∏–±–∫–∏ –∑–∞–ø—Ä–æ—Å–∞
        rates = response.json().get('rates', {})
        return {
            'KRW': 1,
            'USD': rates.get('USD'),  # –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –∫—É—Ä—Å USD –¥–æ—Å—Ç—É–ø–µ–Ω
            'RUB': rates.get('RUB')  # –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –∫—É—Ä—Å RUB –¥–æ—Å—Ç—É–ø–µ–Ω
        }
    except requests.exceptions.RequestException as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∫—É—Ä—Å–æ–≤ –≤–∞–ª—é—Ç: {e}")
        return None


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–∞—Ä—Å–∏–Ω–≥–∞ —Ü–µ–Ω—ã –∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π


def parse_car_data(url):
    with sync_playwright() as p:
        browser = p.chromium.launch(headless=True)
        page = browser.new_page()

        # –ü–µ—Ä–µ—Ö–æ–¥ –ø–æ URL
        page.goto(url, wait_until='domcontentloaded')

        try:
            # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –æ–∂–∏–¥–∞–Ω–∏–µ –¥–ª—è –ø–æ–ª–Ω–æ–π –∑–∞–≥—Ä—É–∑–∫–∏
            page.wait_for_selector("span.DetailLeadCase_point__vdG4b", timeout=10000)

            # –ü–æ–ª—É—á–µ–Ω–∏–µ —Ü–µ–Ω—ã
            span_text = page.query_selector("span.DetailLeadCase_point__vdG4b").inner_text().strip()
            multiplier = 10000000 if ',' in span_text else 10000
            price = float(span_text.replace(",", ".")) * multiplier

            # –ñ–¥—ë–º —ç–ª–µ–º–µ–Ω—Ç—ã –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
            page.wait_for_selector(".DetailCarPhotoPc_thumb__2kpDi.swiper-lazy-loaded", timeout=10000)
            image_urls = page.query_selector_all(".DetailCarPhotoPc_thumb__2kpDi.swiper-lazy-loaded")
            image_sources = [img.get_attribute('src') for img in image_urls]

            # –ü–æ–ª—É—á–µ–Ω–∏–µ –Ω–∞–∑–≤–∞–Ω–∏—è –∞–≤—Ç–æ–º–æ–±–∏–ª—è

            title_element = page.query_selector('h3.DetailSummary_tit_car__0OEVh')
            car_title = title_element.inner_text()
            translator = Translator()
            car_title = translator.translate(car_title, src='ko', dest='ru')

            return {
                "price": price,
                "images": image_sources,
                "title": car_title.text
            }
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–∞—Ä—Å–∏–Ω–≥–µ –¥–∞–Ω–Ω—ã—Ö: {e}")
            return {"price": None, "images": []}
        finally:
            browser.close()  # –ó–∞–∫—Ä—ã–≤–∞–µ–º –±—Ä–∞—É–∑–µ—Ä –¥–ª—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start
@bot.message_handler(commands=['start'])
def send_welcome(message):
    keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True)
    keyboard.add(types.KeyboardButton("–û–±–Ω–æ–≤–∏—Ç—å –∫—É—Ä—Å—ã –≤–∞–ª—é—Ç üìä"))
    keyboard.add(types.KeyboardButton("–†–∞—Å—Å—á–∏—Ç–∞—Ç—å —Å—Ç–æ–∏–º–æ—Å—Ç—å –∞–≤—Ç–æ–º–æ–±–∏–ª—è üöó"))
    user_name = message.from_user.first_name
    bot.send_message(message.chat.id,
                     f'–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ, {user_name}! –†–∞–¥ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–æ–≤–∞—Ç—å –≤–∞—Å! \n–Ø –±–æ—Ç –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞ —Å—Ç–æ–∏–º–æ—Å—Ç–∏ –º–∞—à–∏–Ω —Å —Å–∞–π—Ç–∞ <a href="http://www.encar.com/">www.encar.com</a>. \n–ß–µ–º –º–æ–≥—É –ø–æ–º–æ—á—å?',
                     parse_mode='HTML', reply_markup=keyboard)


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ —Ä–∞—Å—á–µ—Ç–∞ —Å—Ç–æ–∏–º–æ—Å—Ç–∏
@bot.message_handler(func=lambda message: message.text == "–†–∞—Å—Å—á–∏—Ç–∞—Ç—å —Å—Ç–æ–∏–º–æ—Å—Ç—å –∞–≤—Ç–æ–º–æ–±–∏–ª—è üöó")
def ask_for_url(message):
    keyboard = types.InlineKeyboardMarkup()
    keyboard.add(types.InlineKeyboardButton("–ù–∞–∑–∞–¥ ‚¨ÖÔ∏è", callback_data='back_to_main'))
    bot.send_message(message.chat.id, '–û—Ç–ø—Ä–∞–≤—å —Å—Å—ã–ª–∫—É –Ω–∞ –∞–≤—Ç–æ–º–æ–±–∏–ª—å: <a href="http://www.encar.com/">www.encar.com</a>',
                     parse_mode='HTML', reply_markup=keyboard)


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å—Å—ã–ª–æ–∫

@bot.message_handler(func=lambda message: message.text.startswith('http://') or message.text.startswith('https://'))
def calculate_price(message):
    wait = bot.send_message(message.chat.id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞ –ø–æ–¥–æ–∂–¥–∏—Ç–µ...")
    url = message.text.strip()  # –£–±–∏—Ä–∞–µ–º –ª–∏—à–Ω–∏–µ –ø—Ä–æ–±–µ–ª—ã

    if 'encar.com' not in url:
        bot.send_message(message.chat.id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å—Å—ã–ª–∫—É –∏–º–µ–Ω–Ω–æ —Å —Å–∞–π—Ç–∞ www.encar.com.")
        bot.delete_message(chat_id=message.chat.id, message_id=wait.message_id)
        return

    car_data = parse_car_data(url)
    price_KRW = car_data['price']
    img = car_data['images']
    title = car_data['title']

    if price_KRW is not None:
        rates = get_exchange_rates()
        if rates is None:
            bot.send_message(message.chat.id, "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∫—É—Ä—Å—ã –≤–∞–ª—é—Ç. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
            bot.delete_message(chat_id=message.chat.id, message_id=wait.message_id)
            return

        price_USD = price_KRW * rates['USD']
        price_RUB = price_KRW * rates['RUB']

        response_text = f"""
–°—Ç–æ–∏–º–æ—Å—Ç—å –∞–≤—Ç–æ–º–æ–±–∏–ª—è {title}:
‚Ä¢ –í –∫–æ—Ä–µ–π—Å–∫–∏—Ö –≤–æ–Ω–∞—Ö: {price_KRW:,.0f} KRW
‚Ä¢ –í –¥–æ–ª–ª–∞—Ä–∞—Ö –°–®–ê: {price_USD:,.2f} USD
‚Ä¢ –í —Ä–æ—Å—Å–∏–π—Å–∫–∏—Ö —Ä—É–±–ª—è—Ö: {price_RUB:,.2f} RUB
‚Ä¢ <a href="{url}">–°—Å—ã–ª–∫–∞ –Ω–∞ –∞–≤—Ç–æ–º–æ–±–∏–ª—å</a>
"""

        time.sleep(1)
        keyboard = types.InlineKeyboardMarkup()
        keyboard.add(types.InlineKeyboardButton("–ù–∞–∑–∞–¥ ‚¨ÖÔ∏è", callback_data='back_to_main'))

        bot.delete_message(chat_id=message.chat.id, message_id=wait.message_id)
        if img:
            bot.send_photo(chat_id=message.chat.id, photo=img[-1], caption=response_text, reply_markup=keyboard,
                           parse_mode='HTML')
        else:
            bot.send_message(chat_id=message.chat.id, text=response_text, reply_markup=keyboard, parse_mode='HTML')
    else:
        time.sleep(1)
        bot.edit_message_text(chat_id=message.chat.id, message_id=wait.message_id,
                              text="–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ü–µ–Ω—É —Å —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ URL. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Å—Å—ã–ª–∫—É.")


@bot.message_handler(func=lambda message: message.text == "–û–±–Ω–æ–≤–∏—Ç—å –∫—É—Ä—Å—ã –≤–∞–ª—é—Ç üìä")
def show_exchange_rates(message):
    rates = get_exchange_rates()
    response_text = f"""
–ê–∫—Ç—É–∞–ª—å–Ω—ã–µ –∫—É—Ä—Å—ã –≤–∞–ª—é—Ç –Ω–∞ {datetime.datetime.now().strftime('%d.%m.%Y %H:%M')}:
‚Ä¢ KRW/USD: 1 KRW = {rates['USD']} USD
‚Ä¢ KRW/RUB: 1 KRW = {rates['RUB']} RUB
"""
    keyboard = types.InlineKeyboardMarkup()
    keyboard.add(types.InlineKeyboardButton("–ù–∞–∑–∞–¥ ‚¨ÖÔ∏è", callback_data='back_to_main'))
    bot.send_message(message.chat.id, response_text, reply_markup=keyboard)


@bot.callback_query_handler(func=lambda call: True)
def callback_handler(call):
    if call.data == 'back_to_main':
        send_welcome(call.message)


# –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
if __name__ == '__main__':
    bot.polling(none_stop=True)
